#!/usr/bin/python

# OSGBuild.prebuild_osg from osg-build 0.0.23

def prebuild_osg(self):
"""Prebuild osg packages (those with an osg/root directory tree).

"""
osg_dir = os.path.join(self.abs_package_dir, 'osg')
spec_filenames = glob(os.path.join(osg_dir, '*.spec'))
if not spec_filenames:
    raise OSGPrebuildError('Cannot find a spec file')
if not glob(os.path.join(osg_dir, 'root/*')):
    raise OSGPrebuildError('osg/root empty')

try:
    spec_filehandle = open(spec_filenames[0], 'r')
    spec_contents = spec_filehandle.read()
finally:
    spec_filehandle.close()

(macro_vars, expanded_spec) = spec_parse(spec_contents)

tarball_filename = macro_vars['source0']

old_dir = os.getcwd()
os.chdir(os.path.join(osg_dir, 'root'))
if re.search(r'\.tar\.gz|\.tgz', tarball_filename):
    tar_cmd = ['tar', 'czf']
elif re.search(r'\.tar\.bz2|\.tbz2', tarball_filename):
    tar_cmd = ['tar', 'cjf']
else:
    raise OSGPrebuildError(
        ".tar.gz/.tgz or .tar.bz2/.tbz2 expected for source 0, got: "+
        tarball_filename)

tarball_path = os.path.join(self.prebuild_dir, tarball_filename)
tar_cmd += [tarball_path, "--exclude",  '*/.svn*']
tar_cmd += glob("*")

logging.info("Creating tarball:\n" + ' '.join(tar_cmd))
ret = subprocess.call(tar_cmd)
os.chdir(old_dir)

if ret:
    raise OSGPrebuildError('Making tarball ' + tarball_path +
                           ' failed with return code ' + str(ret))

shutil.copy(spec_filenames[0], self.prebuild_dir)

