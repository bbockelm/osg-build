#!/usr/bin/python

# The batlab task (OSGBuild.batlab) from osg-build-0.0.23

def batlab(self):
"""Upload a build to the nmi submit machine and submit it to the
batlab. Push to yum if push_to_yum is true. Now deprecated in
favor of the koji task.

"""
logging.warning("The batlab task is deprecated. " +
                "Use the koji task instead.")
srpm = self.prebuild()
safe_makedirs(self.results_dir)
nmi_prebuild_dir = os.path.join(self.working_subdir, '_nmi_prebuild')
safe_makedirs(nmi_prebuild_dir)
glue_dir = os.path.join(nmi_prebuild_dir, "glue")
safe_makedirs(glue_dir)

name,version,release = subprocess.Popen(
    ['rpm', '-qp', '--qf', '%{name}\n%{version}\n%{release}', srpm],
    stdout=subprocess.PIPE).communicate()[0].split("\n")


remote_dirname = ("%s-%s-%s-%s" %
    (name, version, release, time.strftime("%Y%m%d%H%M",
                                           time.localtime())))

remote_task_args = ["--dist=" + self.options.get('distro_tag', "osg")]
platform_post_args = ["--host=" + getfqdn()]
platform_post_args += ["--script=" + os.path.abspath(sys.argv[0])]
platform_post_args += ["--results-dir=" + self.results_dir]
if self.options.get('push_to_yum') and self.options.get('yum_base'):
    platform_post_args += ["--yum-base=" +
                           self.options['yum_base']]

cmdfile_text = CMDFILE_TEMPLATE.safe_substitute(
    NAME=name, VERSION=version, RELEASE=release,
    REMOTE_TASK_ARGS=" ".join(
        ["'"+x+"'" for x in remote_task_args]),
    NOTIFY=self.options.get('email') or "",
    PLATFORM_POST_ARGS=" ".join(
        ["'"+x+"'" for x in platform_post_args]))

unslurp(os.path.join(nmi_prebuild_dir, "cmdfile"), cmdfile_text)
# Find the glue files under sys.path and copy them to nmi_prebuild_dir
dest = os.path.join(glue_dir, "osg_build_lib")
shutil.copytree(find_file("osg_build_lib", sys.path),
                dest)
for f in glob(os.path.join(dest, "*.py")):
    os.chmod(f, 0755)
shutil.rmtree(os.path.join(dest, ".svn"), ignore_errors=True)

unslurp(os.path.join(nmi_prebuild_dir, "glue.scp"), GLUE_SCP_TEXT)
shutil.copy(srpm, nmi_prebuild_dir)
srpm_scp_text = SRPM_SCP_TEMPLATE.safe_substitute(
    SRPM=os.path.basename(srpm))
unslurp(os.path.join(nmi_prebuild_dir, "srpm.scp"), srpm_scp_text)
    
# Upload nmi_prebuild_dir to the nmi submit machine
os.system("scp -r %s %s:%s" %
          (nmi_prebuild_dir,
          self.options['nmi_submit_machine'],
          remote_dirname))
# Submit the build on the nmi submit machine
# TODO: HAAACK
if self.options['nmi_submit_machine'].endswith('.batlab.org'):
    nmi_submit_path = "/usr/local/nmi/bin"
else:
    nmi_submit_path = "/nmi/bin"
os.system(("""ssh %s 'cd %s;""" +
           """sed -i -e "s,@NMIDIR@,`pwd`," *.scp;""" +
           nmi_submit_path + """/nmi_submit --must-match cmdfile'""") %
          (self.options['nmi_submit_machine'], remote_dirname))
# platform-post.py will put the resulting rpms in results_dir, as well
# as push them to the yum repo if push_to_yum and yum_base are set.
# Put the srpm in the results dir so it'll get pushed as well.
shutil.copy(srpm, self.results_dir)



