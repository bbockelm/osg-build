#!/usr/bin/python
# push task and related code from osg-build 0.0.23

def verify_yum_repos(yum_base):
    """Make sure the directory given in yum_base contains the appropriate
    yum repos, namely the subdirectories 'i386, 'x86_64', and 'src'.

    """
    if not os.path.isdir(yum_base):
        raise Error(("Yum repository base directory '%s' doesn't " +
                     "exist or is not a directory. If it's not a " +
                     "typo, rerun with --init-repos to create it and " +
                     "its subdirectories.") % yum_base)

    for arch in ['i386', 'x86_64', 'src']:
        subdir = os.path.join(yum_base, arch)
        if not os.path.isdir(subdir):
            raise Error(
                ("Yum repository subdirectory '%s' doesn't exist or is not " +
                "a directory. If it's not a typo, rerun with --init-repos " +
                "to create it.") % subdir)


def copy_to_repo(yum_base, rpms):
    """Copy a set of RPMs to to the yum repos under yum_base and rebuild the
    repos. noarch RPMs are copied to both of the arch-specific repos.

    """
    if not yum_base:
        logging.error("Destination yum repo not given.")
        return

    repo = {}
    for arch in ['i386', 'x86_64', 'src']:
        repo[arch] = os.path.join(yum_base, arch)

    for rpm in rpms:
        bn = os.path.basename(rpm)
        logging.info("Copying %s to repos in %s", bn, yum_base)

        if fnmatch(rpm, '*.i[3-6]86.rpm'):
            shutil.copy(rpm, repo['i386'])
        elif fnmatch(rpm, '*.x86_64.rpm'):
            shutil.copy(rpm, repo['x86_64'])
        elif fnmatch(rpm, '*.noarch.rpm'):
            shutil.copy(rpm, repo['i386'])
            shutil.copy(rpm, repo['x86_64'])
        elif fnmatch(rpm, '*.src.rpm'):
            shutil.copy(rpm, repo['src'])

    logging.info("Updating repos")
    for k in repo.keys():
        if k != 'noarch':
            subprocess.call(['createrepo', '-p', '--update', '-d', repo[k]])


def push_task(rpms, yum_base):
    """Copy rpms, either given directly or via recursing into subdirectories,
    to the yum repos under yum_base.

    """
    # Push should probably be a separate script entirely.
    if not yum_base:
        raise UsageError(
            "No yum repo specified for task push! " +
            "Must pass -y or specify yum_base in the config file.")
    real_rpms = []
    for r in rpms:
        if os.path.isfile(r) and r.endswith('.rpm'):
            real_rpms += [r]
        elif os.path.isdir(r):
            def _push_os_walk_helper(real_rpms, dirname, files):
                for f in files:
                    df = os.path.join(dirname, f)
                    if df.endswith('.rpm'):
                        real_rpms += [df]
            os.path.walk(r, _push_os_walk_helper, real_rpms)
    copy_to_repo(yum_base, real_rpms)
