#!/usr/bin/python
"""unit tests for the osg-build tasks

Wishlist:

* Automatically print command output if tests fail
* Be consistent about catching/not catching CalledProcessError

"""
# pylint: disable=C0103,R0904,W0614

import atexit
import re
import os
from os.path import join as opj
import shutil
import tempfile
import unittest
from unittest import makeSuite
import sys

from osgbuild.constants import *
from osgbuild import main
from osgbuild import srpm
from osgbuild import utils
from osgbuild.utils import (
    checked_backtick,
    checked_call,
    CalledProcessError,
    find_file)

TRUNK = "native/redhat/trunk"

initial_wd = os.getcwd()
osg_build_path = find_file('osg-build', [initial_wd,
                                         '/usr/bin'])

if not osg_build_path:
    print >> sys.stderr, "osg-build script not found!"
    sys.exit(255)

osg_build_command = [osg_build_path, "--config-file=/dev/null"]

def common_setUp(path, rev):
    '''Create a temporary directory, ensure it gets deleted on exit, cd to it,
    and check out a specific revision of a path from our SVN.

    '''
    working_dir = tempfile.mkdtemp(prefix="osg-build-test-")
    atexit.register(shutil.rmtree, working_dir)
    os.chdir(working_dir)
    svn_export(path, rev, os.path.basename(path))
    return opj(working_dir, os.path.basename(path))

def backtick_osg_build(cmd_args, *args, **kwargs):
    kwargs['clocale'] = True
    kwargs['err2out'] = True
    return checked_backtick(osg_build_command + cmd_args, *args, **kwargs)

def checked_osg_build(cmd_args, *args, **kwargs):
    return checked_call(osg_build_command + cmd_args, *args, **kwargs)

def svn_export(path, rev, destpath):
    '''Run svn export on a revision rev of path into destpath'''
    try:
        checked_backtick(
            ["svn", "export", opj(SVN_ROOT, path), "-r", rev, destpath],
            err2out=True)
    except CalledProcessError, err:
        print >> sys.stderr, "Error in svn export:"
        print >> sys.stderr, err.output
        raise

def get_listing(directory):
    return checked_backtick(
            ["ls", directory]).split("\n")



class XTestCase(unittest.TestCase):
    """XTestCase (extended test case) adds some useful assertions to
    unittest.TestCase

    """

    def assertReSearch(self, regex, text, message, verbose=False):
        """Assert that a regex search on text succeeds"""
        try:
            return self.assertTrue(re.search(regex, text), message)
        except AssertionError:
            if verbose:
                print >> sys.stderr, (
                    "Regex search '%s' failed on text '%s'" %
                    (regex, text))
            raise

    def assertNoReSearch(self, regex, text, message, verbose=False):
        """Assert that a regex search on text fails"""
        try:
            return self.assertFalse(re.search(regex, text), message)
        except AssertionError:
            if verbose:
                print >> sys.stderr, (
                    "Negative regex search '%s' failed on text '%s'" %
                    (regex, text))
            raise


class TestLint(XTestCase):
    """Tests for 'lint' task"""

    def setUp(self):
        self.pkg_dir = common_setUp(opj(TRUNK, "yum-remove-osg"),
                                    "{2011-12-06}")

    def test_lint(self):
        out = backtick_osg_build(["lint", self.pkg_dir])
        try:
            self.assertReSearch(
                re.escape("yum-remove-osg.src:25: E: hardcoded-library-path"),
                out,
                "expected error not found")
            self.assertReSearch(
                re.escape("1 packages and 0 specfiles checked"),
                out,
                "unexpected number of packages checked")
            self.assertReSearch(
                re.escape("rpmlint found problems with yum-remove-osg"),
                out,
                "expected problems not found")
        except:
            print >> sys.stderr, "Problems found. Output:\n", out
            raise


class TestRpmbuild(XTestCase):
    """Tests for 'rpmbuild' task"""

    def setUp(self):
        self.pkg_dir = common_setUp(opj(TRUNK, "yum-remove-osg"),
                                    "{2011-12-06}")

    def test_rpmbuild(self):
        out = backtick_osg_build(["rpmbuild", self.pkg_dir])
        try:
            self.assertReSearch(
                r'(?ms)INFO:osg-build:The following RPM[(]s[)] have been created:\n'
                r'[^\n]+' + re.escape("yum-remove-osg-1.0-0.2.osg.el5.noarch.rpm"),
                out,
                "rpm created message not found")
        except:
            print >> sys.stderr, "Problems found. Output:\n", out
            raise


class TestPrebuild(XTestCase):
    """Tests for 'prebuild' task"""

    def test_prebuild(self):
        pkg_dir = common_setUp(opj(TRUNK, "mash"),
                               "{2011-12-08}")
        checked_osg_build(["prebuild", pkg_dir])
        upstream_contents = get_listing(opj(pkg_dir, WD_UNPACKED))
        final_contents = get_listing(opj(pkg_dir, WD_PREBUILD))

        self.assertTrue(
            "mash.spec" in upstream_contents,
            "spec file not in upstream contents")
        self.assertTrue(
            "mash-0.5.22.tar.gz" in upstream_contents,
            "source tarball not in upstream contents")
        self.assertTrue(
            "mash.spec" in final_contents,
            "spec file not in final contents")
        self.assertTrue(
            "multilib-python.patch" in final_contents,
            "osg patch not in final contents")
        self.assertTrue(
            "mash-0.5.22-2.osg.el5.src.rpm" in final_contents,
            "srpm not successfully built")

    def test_prebuild_osgonly(self):
        pkg_osgonly_dir = common_setUp(opj(TRUNK, "yum-remove-osg"),
                                       "{2012-01-26}")
        checked_osg_build(["prebuild", pkg_osgonly_dir])
        final_contents = get_listing(opj(pkg_osgonly_dir, WD_PREBUILD))

        self.assertTrue(
            "yum-remove-osg-1.0-0.2.osg.el5.src.rpm" in final_contents,
            "srpm not successfully built")

    def test_prebuild_passthrough(self):
        pkg_passthrough_dir = common_setUp(opj(TRUNK, "globus-core"),
                                           "{2012-01-26}")
        checked_osg_build(["prebuild", pkg_passthrough_dir])
        final_contents = get_listing(opj(pkg_passthrough_dir, WD_PREBUILD))

        self.assertTrue(
            "globus-core-8.5-2.osg.el5.src.rpm" in final_contents,
            "srpm not successfully built")

    def test_prebuild_full_extract(self):
        pkg_dir = common_setUp(opj(TRUNK, "mash"),
                               "{2011-12-08}")
        out = backtick_osg_build(["prebuild", "--full-extract", pkg_dir])
        ut_contents = checked_backtick(
            ["ls", opj(pkg_dir, WD_UNPACKED_TARBALL)]
            ).split("\n")
        tarball_contents = checked_backtick(
            ["ls", opj(pkg_dir, WD_UNPACKED_TARBALL, "mash-0.5.22")]
            ).split("\n")

        self.assertNoReSearch(
            re.escape("cpio: premature end of archive"),
            out,
            "file unreadable by cpio")
        self.assertTrue(
            "mash.spec" in ut_contents,
            "spec file not in unpacked tarball dir")
        self.assertTrue(
            "README" in tarball_contents,
            "expected file not in unpacked sources")
# end of TestPrebuild


class TestPrepare(XTestCase):
    """Tests for 'prepare' task"""

    def setUp(self):
        self.pkg_dir = common_setUp(opj(TRUNK, "globus-gatekeeper"),
                                    "{2011-12-14}")

    def test_prepare(self):
        checked_osg_build(["prepare", self.pkg_dir])
        self.assertTrue(os.path.exists(opj(self.pkg_dir, WD_RESULTS, "BUILD",
                        "globus_gatekeeper-8.1")), "SRPM unpacked")
        head_out = checked_backtick(
            ["head", "-n", "10", opj(self.pkg_dir, WD_RESULTS, "BUILD",
            "globus_gatekeeper-8.1", "init", "globus-gatekeeper-lsb.in")])
        self.assertReSearch(
            r"Default-Stop:\s+0 1 2 3 4 5 6",
            head_out,
            "Patches not applied")


class TestFetch(XTestCase):
    """Tests for fetch-sources"""

    def setUp(self):
        self.pkg_dir = common_setUp(opj(TRUNK, "mash"),
                                    "{2011-12-08}")
        utils.unslurp("fetch-sources", """\
#!%(python)s
import sys
sys.path.insert(0, "%(pkgdatadir)s")
from osgbuild import fetch_sources
fetch_sources.fetch('.')
""" % {'python': sys.executable, 'pkgdatadir': sys.path[0]})
        os.chmod("fetch-sources", 0755)

    def test_fetch(self):
        os.chdir('mash')
        checked_call("../fetch-sources")
        contents = checked_backtick(["ls"]).split("\n")

        self.assertTrue(
            "mash.spec" in contents,
            "spec file not found")
        self.assertTrue(
            "mash-0.5.22.tar.gz" in contents,
            "source tarball not found")
        head_out = checked_backtick(
            ["head", "-n", "15", "mash.spec"])
        self.assertReSearch(
            r"Patch0:\s+multilib-python.patch",
            head_out,
            "Spec file not overridden")


class TestMock(XTestCase):
    """Tests for mock"""

    def setUp(self):
        self.pkg_dir = common_setUp(opj(TRUNK, "koji"),
                                    "{2012-01-25}")
        
    def test_mock_auto_cfg(self):
        checked_osg_build(["mock", self.pkg_dir])

    def test_mock_koji_cfg(self):
        checked_osg_build(["mock", self.pkg_dir,
                           "--mock-config-from-koji=el5-osg-build"])
        

class TestKoji(XTestCase):
    """Tests for koji"""

    def setUp(self):
        self.pkg_dir = common_setUp(opj(TRUNK, "koji"),
                                    "{2012-01-25}")

    def test_koji_basic(self):
        checked_osg_build(["koji", "--scratch", self.pkg_dir])


class TestMisc(XTestCase):
    """Other tests"""

    def test_cmdline_scratch_svn(self):
        buildopts = main.init(
            ["osg-build", "-C", "/dev/null", "koji", "--scratch", "."])[0]
        self.assertFalse(buildopts['svn'],
                         "svn not false for scratch build")

        buildopts = main.init(
            ["osg-build", "-C", "/dev/null", "koji", "."])[0]
        self.assertTrue(buildopts['svn'],
                        "svn not true for non-scratch build")

    def test_rpmbuild_defines(self):
        buildopts_el = dict()
        build_el = dict()
        defines_el = dict()
        for rhel in ['5', '6']:
            buildopts_el[rhel] = DEFAULT_BUILDOPTS_COMMON.copy()
            buildopts_el[rhel]['redhat_release'] = rhel
            buildopts_el[rhel].update(DEFAULT_BUILDOPTS_BY_REDHAT_RELEASE[rhel])
            build_el[rhel] = srpm.SRPMBuild(".", buildopts_el[rhel], None, None)
            defines_el[rhel] = build_el[rhel].get_rpmbuild_defines(True)
            self.assertTrue("--define=rhel %s" % rhel in defines_el[rhel],
                            "%%rhel not set correctly for el%s build" % rhel)

        self.assertTrue('--define=el5 1' in defines_el['5'],
                        "%el5 not set for el5 build")
        self.assertTrue('--define=el6 0' in defines_el['5'],
                        "%el6 not unset for el5 build")
                        
        self.assertTrue('--define=el6 1' in defines_el['6'],
                        "%el6 not set for el6 build")
        self.assertTrue('--define=el5 0' in defines_el['6'],
                        "%el5 not unset for el6 build")
        
        self.assertTrue('--define=_source_filedigest_algorithm 1' in
                        defines_el['5'],
                        "filedigest algorithm not set for el5 build")
                        

short_test_cases = (TestLint, TestRpmbuild, TestPrebuild, TestPrepare, TestFetch, TestMisc)
TestSuiteShort = unittest.TestSuite()
TestSuiteShort.addTests([makeSuite(t) for t in short_test_cases])
# Make sure TestKoji comes first since it requires user interaction.
TestSuiteAll = unittest.TestSuite((makeSuite(TestKoji), TestSuiteShort, makeSuite(TestMock)))

if __name__ == '__main__':
    try:
        print >> sys.stderr, "testing " + osg_build_path
        unittest.main()
    except CalledProcessError, e:
        print >> sys.stderr, "output: " + e.output
        raise

