#!/usr/bin/python

import atexit
import re
import os
import shutil
import tempfile
import unittest
import sys

from osg_build_lib.constants import SVN_ROOT
from osg_build_lib.utils import checked_call, checked_backtick, sbacktick, CalledProcessError

OSG_BUILD_COMMAND = "osg-build --config-file=/dev/null"


def svn_export(path, rev, destpath):
    try:
        out = checked_backtick(["svn", "export", os.path.join(SVN_ROOT, path), "-r", rev, destpath], err2out=True)
    except CalledProcessError, e:
        print >> sys.stderr, "Error in svn export:"
        print >> sys.stderr, out
        raise


class TestLint(unittest.TestCase):

    def setUp(self):
        self.working_dir = tempfile.mkdtemp(prefix="osg-build-test-")
        atexit.register(shutil.rmtree, self.working_dir)
        self.old_dir = os.getcwd()
        os.chdir(self.working_dir)
        # Check out a specific version of the yum-remove-osg package
        svn_export("native/redhat/trunk/yum-remove-osg", "{2011-12-06}", "yum-remove-osg")

    def tearDown(self):
        os.chdir(self.old_dir)

    def test_lint(self):
        out, err = sbacktick(OSG_BUILD_COMMAND + " lint " + os.path.join(self.working_dir, "yum-remove-osg"), err2out=True)
        self.assertEqual(err, 0, "program exited successfully")
        self.assertNotEqual(out.find("yum-remove-osg.src:25: E: hardcoded-library-path"), -1, "expected error found")
        self.assertNotEqual(out.find("1 packages and 0 specfiles checked"), -1, "expected number of packages checked")
        self.assertNotEqual(out.find("rpmlint found problems with yum-remove-osg"), -1, "expected problems found")


class TestRpmbuild(unittest.TestCase):

    def setUp(self):
        self.working_dir = tempfile.mkdtemp(prefix="osg-build-test-")
        atexit.register(shutil.rmtree, self.working_dir)
        self.old_dir = os.getcwd()
        os.chdir(self.working_dir)
        svn_export("native/redhat/trunk/yum-remove-osg", "{2011-12-06}", "yum-remove-osg")

    def tearDown(self):
        os.chdir(self.old_dir)

    def test_rpmbuild(self):
        out, err = sbacktick(OSG_BUILD_COMMAND + " rpmbuild --loglevel=INFO " + os.path.join(self.working_dir, "yum-remove-osg"), err2out=True)
        self.assertEqual(err, 0, "program exited successfully")
        self.assertTrue(re.search(r'(?ms)INFO:osg-build:The following RPM[(]s[)] have been created:\n'# +
                        r'[^\n]+' + re.escape("yum-remove-osg-1.0-0.2.osg.noarch.rpm"),
                        out), "rpm created message found")




if __name__ == '__main__':
    unittest.main()

