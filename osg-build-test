#!/usr/bin/python
"""unit tests for the osg-build tasks

Wishlist:

* Automatically print command output if tests fail
* Be consistent about catching/not catching CalledProcessError

"""
# pylint: disable-msg=C0103,C0111

import atexit
import re
import os
from os.path import join as opj
import shutil
import tempfile
import unittest
import sys

from osg_build_lib.constants import (
    SVN_ROOT,
    WD_PREBUILD,
    WD_RESULTS,
    WD_UNPACKED,
    WD_UNPACKED_TARBALL)
from osg_build_lib.utils import (
    checked_backtick,
    CalledProcessError)

OSG_BUILD_COMMAND = "osg-build --config-file=/dev/null --el5"
TRUNK = "native/redhat/trunk"

initial_wd = os.getcwd()

def common_setUp(path, rev):
    '''Create a temporary directory, ensure it gets deleted on exit, cd to it,
    and check out a specific revision of a path from our SVN.

    '''
    working_dir = tempfile.mkdtemp(prefix="osg-build-test-")
    atexit.register(shutil.rmtree, working_dir)
    os.chdir(working_dir)
    svn_export(path, rev, os.path.basename(path))
    return opj(working_dir, os.path.basename(path))

def svn_export(path, rev, destpath):
    '''Run svn export on a revision rev of path into destpath'''
    try:
        checked_backtick(
            ["svn", "export", opj(SVN_ROOT, path), "-r", rev, destpath],
            err2out=True)
    except CalledProcessError, err:
        print >> sys.stderr, "Error in svn export:"
        print >> sys.stderr, err.output
        raise


class XTestCase(unittest.TestCase):
    """XTestCase (extended test case) adds some useful assertions to
    unittest.TestCase

    """

    def assertReSearch(self, regex, text, message):
        """Assert that a regex search on text succeeds"""
        return self.assertTrue(re.search(regex, text), message)

    def assertNoReSearch(self, regex, text, message):
        """Assert that a regex search on text fails"""
        return self.assertFalse(re.search(regex, text), message)


class TestLint(XTestCase):
    """Tests for 'lint' task"""

    def setUp(self):
        self.pkg_dir = common_setUp(opj(TRUNK, "yum-remove-osg"),
                                    "{2011-12-06}")

    def test_lint(self):
        try:
            out = checked_backtick(OSG_BUILD_COMMAND + " lint " + self.pkg_dir,
                                   clocale=True,
                                   err2out=True)
        except CalledProcessError, err:
            print >> sys.stderr, "Error in osg-build. Output:"
            print >> sys.stderr, err.output
            raise
        self.assertReSearch(
            re.escape("yum-remove-osg.src:25: E: hardcoded-library-path"),
            out,
            "expected error not found")
        self.assertReSearch(
            re.escape("yum-remove-osg.src:25: E: hardcoded-library-path"),
            out,
            "expected error not found")
        self.assertReSearch(
            re.escape("1 packages and 0 specfiles checked"),
            out,
            "unexpected number of packages checked")
        self.assertReSearch(
            re.escape("rpmlint found problems with yum-remove-osg"),
            out,
            "expected problems not found")


class TestRpmbuild(XTestCase):
    """Tests for 'rpmbuild' task"""

    def setUp(self):
        self.pkg_dir = common_setUp(opj(TRUNK, "yum-remove-osg"),
                                    "{2011-12-06}")

    def test_rpmbuild(self):
        out = checked_backtick(OSG_BUILD_COMMAND + " rpmbuild " + self.pkg_dir,
                               clocale=True,
                               err2out=True)
        self.assertReSearch(
            r'(?ms)INFO:osg-build:The following RPM[(]s[)] have been created:\n'
            r'[^\n]+' + re.escape("yum-remove-osg-1.0-0.2.osg.el5.noarch.rpm"),
            out,
            "rpm created message not found")


class TestPrebuild(XTestCase):
    """Tests for 'prebuild' task"""

    def setUp(self):
        self.pkg_dir = common_setUp(opj(TRUNK, "mash"),
                                    "{2011-12-08}")

    # TODO add test case for only one of {osg,upstream}
    def test_prebuild(self):
        out = checked_backtick(OSG_BUILD_COMMAND + " prebuild " + self.pkg_dir,
                               err2out=True)
        upstream_contents = checked_backtick(
            ["ls", opj(self.pkg_dir, WD_UNPACKED)]).split("\n")
        final_contents = checked_backtick(
            ["ls", opj(self.pkg_dir, WD_PREBUILD)]).split("\n")

        self.assertTrue(
            "mash.spec" in upstream_contents,
            "spec file not in upstream contents")
        self.assertTrue(
            "mash-0.5.22.tar.gz" in upstream_contents,
            "source tarball not in upstream contents")
        self.assertTrue(
            "mash.spec" in final_contents,
            "spec file not in final contents")
        self.assertTrue(
            "multilib-python.patch" in final_contents,
            "osg patch not in final contents")
        self.assertTrue(
            "mash-0.5.22-2.osg.el5.src.rpm" in final_contents,
            "srpm not successfully built")

    def test_prebuild_full_extract(self):
        out = checked_backtick(OSG_BUILD_COMMAND +
                               " prebuild --full-extract " +
                               self.pkg_dir,
                               clocale=True,
                               err2out=True)
        ut_contents = checked_backtick(
            ["ls", opj(self.pkg_dir, WD_UNPACKED_TARBALL)]
            ).split("\n")
        tarball_contents = checked_backtick(
            ["ls", opj(self.pkg_dir, WD_UNPACKED_TARBALL, "mash-0.5.22")]
            ).split("\n")

        self.assertNoReSearch(
            re.escape("cpio: premature end of archive"),
            out,
            "file unreadable by cpio")
        self.assertTrue(
            "mash.spec" in ut_contents,
            "spec file not in unpacked tarball dir")
        self.assertTrue(
            "README" in tarball_contents,
            "expected file not in unpacked sources")

        
class TestPrepare(XTestCase):
    """Tests for 'prepare' task"""

    def setUp(self):
        self.pkg_dir = common_setUp(opj(TRUNK, "globus-gatekeeper"),
                                    "{2011-12-14}")

    def test_prepare(self):
        out = checked_backtick(OSG_BUILD_COMMAND + " prepare " + self.pkg_dir,
                               clocale=True,
                               err2out=True)
        self.assertTrue(os.path.exists(opj(self.pkg_dir, WD_RESULTS, "BUILD",
                        "globus_gatekeeper-8.1")), "SRPM unpacked")
        head_out = checked_backtick(
            ["head", "-n", "10", opj(self.pkg_dir, WD_RESULTS, "BUILD",
            "globus_gatekeeper-8.1", "init", "globus-gatekeeper-lsb.in")])
        self.assertReSearch(
            r"Default-Stop:\s+0 1 2 3 4 5 6",
            head_out,
            "Patches not applied")
        

if __name__ == '__main__':
    unittest.main()

